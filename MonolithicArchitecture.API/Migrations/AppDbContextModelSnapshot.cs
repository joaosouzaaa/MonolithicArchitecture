// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonolithicArchitecture.API.Data.DatabaseContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MonolithicArchitecture.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorAttendantSpeciality", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialitiesId")
                        .HasColumnType("integer");

                    b.HasKey("DoctorsId", "SpecialitiesId");

                    b.HasIndex("SpecialitiesId");

                    b.ToTable("DoctorAttendantSpeciality");
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.AppointmentTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorAttendantId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAttendantId");

                    b.HasIndex("PatientClientId");

                    b.ToTable("AppointmentsTime", (string)null);
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("license_number");

                    b.HasKey("Id");

                    b.ToTable("Certifications", (string)null);
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int>("PatientClientId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("char(11)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("PatientClientId")
                        .IsUnique();

                    b.ToTable("ContactInfos", (string)null);
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.DoctorAttendant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<int>("CertificationId")
                        .HasColumnType("integer");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer")
                        .HasColumnName("experience_years");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId")
                        .IsUnique();

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.PatientClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorAttendantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAttendantId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Specialities", (string)null);
                });

            modelBuilder.Entity("DoctorAttendantSpeciality", b =>
                {
                    b.HasOne("MonolithicArchitecture.API.Entities.DoctorAttendant", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonolithicArchitecture.API.Entities.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.AppointmentTime", b =>
                {
                    b.HasOne("MonolithicArchitecture.API.Entities.DoctorAttendant", "DoctorAttendant")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorAttendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentTime_DoctorAttendant");

                    b.HasOne("MonolithicArchitecture.API.Entities.PatientClient", "PatientClient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentTime_PatientClient");

                    b.Navigation("DoctorAttendant");

                    b.Navigation("PatientClient");
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.ContactInfo", b =>
                {
                    b.HasOne("MonolithicArchitecture.API.Entities.PatientClient", "PatientClient")
                        .WithOne("ContactInfo")
                        .HasForeignKey("MonolithicArchitecture.API.Entities.ContactInfo", "PatientClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactInfo_PatientClient");

                    b.Navigation("PatientClient");
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.DoctorAttendant", b =>
                {
                    b.HasOne("MonolithicArchitecture.API.Entities.Certification", "Certification")
                        .WithOne()
                        .HasForeignKey("MonolithicArchitecture.API.Entities.DoctorAttendant", "CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.Schedule", b =>
                {
                    b.HasOne("MonolithicArchitecture.API.Entities.DoctorAttendant", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorAttendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorAttendant_Schedule");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.DoctorAttendant", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("MonolithicArchitecture.API.Entities.PatientClient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
